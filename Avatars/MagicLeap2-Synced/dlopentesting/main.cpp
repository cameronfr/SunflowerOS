#include <android/log.h>
#include <dlfcn.h>

#define printf(...) __android_log_print(ANDROID_LOG_INFO, "Sunflower dlopentest", __VA_ARGS__)

extern "C" int main(int argc, char *argv[]) {
  // dlopen
  void *handle = dlopen("/data/data/com.termux/files/home/MagicLeap2-Synced/libraries/libfbjni.so", RTLD_NOW | RTLD_GLOBAL);
  if (!handle) {
    printf("dlopen failed: %s\n", dlerror());
    return 1;
  } 
  printf("dlopen succeeded\n");

  // dlsym 1: works on both termux-process and dalvik process
  // dlerror();
  // printf("Trying dlsym with handle");
  // void *sym = dlsym(handle, "_ZNK8facebook3jni7JBuffer16getDirectAddressEv");
  // printf("dlsym returned %p\n", sym);
  // printf("dlerror is %s\n", dlerror());

  // dlsym 2: succeeds on both 
  // dlerror();
  // printf("Trying dlsym with RTLD_DEFAULT");
  // void *sym2 = dlsym(RTLD_DEFAULT, "_ZNK8facebook3jni7JBuffer16getDirectAddressEv");
  // printf("dlsym returned %p\n", sym2);
  // printf("dlerror is %s\n", dlerror());

  // dlsym 3: succeeds on termux-process, fails on our dalvik process :O. When calling on termux, this is happening in executable. When calling on dalvik, this is happening in loaded shared library ... ? 
  // maybe related to https://github.com/android/ndk/issues/201
  // printf("Trying dlsym with null dlopen handle");
  // void *handle2 = dlopen(nullptr, RTLD_NOW | RTLD_GLOBAL);
  // if (!handle2) {
  //   printf("dlopen failed: %s\n", dlerror());
  //   return 1;
  // }
  // printf("self handle is %p\n", handle2);
  // dlerror();
  // void *sym3 = dlsym(handle2, "_ZNK8facebook3jni7JBuffer16getDirectAddressEv");
  // printf("dlsym returned %p\n", sym3);
  // printf("dlerror is %s\n", dlerror());
}

